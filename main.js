/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    autoClearInterval: 0,
    autoClearOnBoot: false,
};
class OzanClearImages extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.imageRegex = /.*(jpe?g|png|gif|svg|bmp)/;
        this.imageExtensions = new Set(['jpeg', 'jpg', 'png', 'gif', 'svg', 'bmp']);
        // Compare Used Images with all images and return unused ones
        this.clearUnusedImages = () => __awaiter(this, void 0, void 0, function* () {
            var all_images_in_vault = this.getAllImagesInVault();
            var unused_images = [];
            var used_images_set;
            // Get Used Images in All Markdown Files
            used_images_set = this.getImagePathSetForVault();
            // Compare All Images vs Used Images
            all_images_in_vault.forEach(img => {
                if (!used_images_set.has(img.path))
                    unused_images.push(img);
            });
            var len = unused_images.length;
            if (len > 0) {
                console.log('[+] Deleting ' + len + ' images.');
                yield this.deleteFilesInTheList(unused_images);
                new obsidian.Notice(len + ' image(s) in total deleted.');
                console.log('[+] Delete completed.');
            }
            else {
                new obsidian.Notice('All images are used. Nothing was deleted.');
            }
        });
        // Clear Images From the Provided List
        this.deleteFilesInTheList = (fileList) => __awaiter(this, void 0, void 0, function* () {
            for (let file of fileList) {
                yield this.app.vault.delete(file);
                console.log('Deleted: ' + file.path);
            }
        });
        // Getting all available images saved in vault
        this.getAllImagesInVault = () => {
            let allFiles = this.app.vault.getFiles();
            let images = [];
            for (let i = 0; i < allFiles.length; i++) {
                if (this.imageExtensions.has(allFiles[i].extension)) {
                    images.push(allFiles[i]);
                }
            }
            return images;
        };
        // New Method for Getting All Used Images
        this.getImagePathSetForVault = () => {
            var images_set = new Set();
            var resolvedLinks = this.app.metadataCache.resolvedLinks;
            if (resolvedLinks) {
                for (const [md_file, links] of Object.entries(resolvedLinks)) {
                    for (const [file_path, nr] of Object.entries(resolvedLinks[md_file])) {
                        var image_match = file_path.match(this.imageRegex);
                        if (image_match)
                            images_set.add(image_match[0]);
                    }
                }
            }
            return images_set;
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Loading oz-clear-unused-images plugin");
            this.addSettingTab(new OzanClearImagesSettingsTab(this.app, this));
            yield this.loadSettings();
            this.addCommand({
                id: 'clear-images-obsidian',
                name: 'Clear Unused Images in Vault',
                callback: () => this.clearUnusedImages()
            });
            this.app.workspace.on('layout-ready', () => {
                if (this.settings.autoClearOnBoot) {
                    setTimeout(() => this.clearUnusedImages(), 3000);
                }
                if (this.settings.autoClearInterval > 0) {
                    this.startAutoClean(this.settings.autoClearInterval);
                }
            });
        });
    }
    onunload() {
        console.log('Unloading oz-clear-unused-images plugin');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    // Auto Clear Images
    startAutoClean(minutes) {
        this.timeoutID = window.setTimeout(() => {
            this.clearUnusedImages();
            this.startAutoClean();
        }, (minutes !== null && minutes !== void 0 ? minutes : this.settings.autoClearInterval) * 60000);
    }
    // Clear Timeout
    clearAutoClean() {
        if (this.timeoutID) {
            window.clearTimeout(this.timeoutID);
            return true;
        }
        return false;
    }
}
class OzanClearImagesSettingsTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Clear Images Settings" });
        new obsidian.Setting(containerEl)
            .setName('Clear image interval (minutes)')
            .setDesc('Check and clear the unused images every X monutes. To disable auto clear, give zero (default)')
            .addText((text) => text
            .setValue(String(this.plugin.settings.autoClearInterval))
            .onChange((value) => {
            if (!isNaN(Number(value))) {
                this.plugin.settings.autoClearInterval = Number(value);
                this.plugin.saveSettings();
                if (this.plugin.settings.autoClearInterval > 0) {
                    this.plugin.clearAutoClean();
                    this.plugin.startAutoClean(this.plugin.settings.autoClearInterval);
                    new obsidian.Notice(`Auto clear enabled! Every ${this.plugin.settings.autoClearInterval} minutes`);
                }
                else if (this.plugin.settings.autoClearInterval <= 0) {
                    this.plugin.clearAutoClean() && new obsidian.Notice('Auto clear disabled');
                }
            }
            else {
                new obsidian.Notice("Please specify a valid number.");
            }
        }));
        new obsidian.Setting(containerEl)
            .setName("Clear Images on startup")
            .setDesc("Automatically clear images when Obsidian starts")
            .addToggle((toggle) => toggle
            .setValue(this.plugin.settings.autoClearOnBoot)
            .onChange((value) => {
            this.plugin.settings.autoClearOnBoot = value;
            this.plugin.saveSettings();
        }));
    }
}

module.exports = OzanClearImages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
